Q.6  What is template literals in ES6 and how do you use them?
Solution:Template literals, introduced in ECMAScript 6 (ES6), provide an improved way to work with strings in JavaScript. They allow for easy embedding of variables and expressions within a string, along with support for multi-line strings. Template literals are defined using backticks (` `) instead of single or double quotes.

Here's how you can use template literals:

1. Basic string interpolation:
   - Variables and expressions can be embedded directly within the string using `${}` notation.
   - The expressions inside `${}` are evaluated and their values are inserted into the string.

```javascript
const name = "Alice";
const age = 25;

const greeting = `Hello, ${name}! You are ${age} years old.`;
console.log(greeting);
// Output: Hello, Alice! You are 25 years old.
```

In this example, the variables `name` and `age` are embedded within the template literal using `${}`. The expressions inside `${}` are evaluated, and their values are interpolated into the resulting string.

2. Multi-line strings:
   - Template literals make it easier to create strings that span multiple lines without the need for concatenation or escape characters.

```javascript
const multiLineString = `
  This is a multi-line string
  that spans across multiple lines.
  It allows for easy formatting and readability.
`;
console.log(multiLineString);
/* Output:
  This is a multi-line string
  that spans across multiple lines.
  It allows for easy formatting and readability.
*/
```

In this example, the string is defined using backticks, and line breaks within the template literal are preserved in the resulting string.

3. Expression evaluation:
   - Template literals allow the evaluation of expressions within `${}`.
   - These expressions can include function calls, mathematical operations, and more.

```javascript
const a = 5;
const b = 10;

const result = `The sum of ${a} and ${b} is ${a + b}.`;
console.log(result);
// Output: The sum of 5 and 10 is 15.
```

In this example, the expression `${a + b}` is evaluated, and the result is interpolated into the string.

Template literals provide a more readable and flexible way to work with strings in JavaScript, especially when variables and expressions need to be included within the string. They eliminate the need for manual string concatenation and offer improved code readability.
