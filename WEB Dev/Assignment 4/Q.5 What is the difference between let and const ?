Q.5 What is the difference between let and const ?
Solution:
The main difference between `let` and `const` in JavaScript lies in their mutability and reassignment capabilities:

1. Mutable vs. Immutable:
- `let`: Variables declared with `let` are mutable, which means their values can be reassigned or modified after declaration.
- `const`: Variables declared with `const` are immutable, which means their values cannot be reassigned once they are assigned a value. However, it's important to note that `const` does not make the value itself immutable. If the value is an object or an array, its properties or elements can still be modified.

2. Reassignment:
- `let`: Variables declared with `let` can be reassigned with a new value.
- `const`: Variables declared with `const` cannot be reassigned after they are assigned a value. Attempting to do so will result in a `TypeError`.

```javascript
let x = 5;
x = 10; // Reassignment with let is allowed

const y = 5;
y = 10; // TypeError: Assignment to constant variable
```

In the example above, `x` is declared with `let` and can be reassigned with a new value without any errors. However, reassigning `y`, which is declared with `const`, throws a `TypeError` because it violates the immutability constraint.

It's worth noting that when assigning a value to a `const` variable, the value must be provided at the time of declaration. Once a `const` variable is assigned, it cannot be left uninitialized.

```javascript
const z; // SyntaxError: Missing initializer in const declaration
```

In summary, the key difference between `let` and `const` is that `let` allows reassignment and mutable variables, while `const` enforces immutability and disallows reassignment after the initial assignment. However, it's important to understand that `const` does not make the value itself immutable if it's an object or an array; it only prevents the variable from being reassigned.
