<aside>
ðŸ’¡ **Question 1**

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

**Example 1:**

**Input:** s = "IDID"

**Output:**

[0,4,1,3,2]

</aside>

Leetcode : https://leetcode.com/problems/di-string-match/

Solution:
class Solution {
public:
    vector<int> diStringMatch(string s) {
        vector<int> result;
        int n = s.size();
        result.reserve(n + 1);
        int l = 0, r = n;

        for (int i = 0; i < n; i++) {
            if (s[i] == 'I') result.emplace_back(l++);
            else result.emplace_back(r--);
        }
        // l is equal to r
        result.emplace_back(l);

        return result;
    }
};
