<aside>
ðŸ’¡ **Question 2**

Given a string s containing only three types of characters: '(', ')' and '*', return true *if* s *is **valid***.

The following rules define a **valid** string:

- Any left parenthesis '(' must have a corresponding right parenthesis ')'.
- Any right parenthesis ')' must have a corresponding left parenthesis '('.
- Left parenthesis '(' must go before the corresponding right parenthesis ')'.
- '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".

**Example 1:**

**Input:** s = "()"

**Output:**

true

</aside>

Leetcode link: https://leetcode.com/problems/valid-parenthesis-string/description/

Solution;

// Memoization
class Solution {
    bool ex(int ind, int openingBracket, string &s, vector<vector<int>> &dp){
        if(ind==s.size()) return (openingBracket==0);

        if(dp[ind][openingBracket]!=-1) return dp[ind][openingBracket];

        bool ans=false;
        if(s[ind]=='*'){
            ans|=ex(ind+1,openingBracket+1,s,dp);
            if(openingBracket) ans|=ex(ind+1,openingBracket-1,s,dp);
            ans|=ex(ind+1,openingBracket,s,dp);
        }else{
            if(s[ind]=='('){
                ans=ex(ind+1,openingBracket+1,s,dp);
            }else{
                if(openingBracket) ans=ex(ind+1,openingBracket-1,s,dp);
            }
        }

        return dp[ind][openingBracket]=ans;
    }

public:
    bool checkValidString(string s) {
        vector<vector<int>> dp(s.size(), vector<int>(s.size(),-1));
        return ex(0,0,s,dp);
    }
};
